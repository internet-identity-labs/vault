type Approve = record {
    status : TransactionState;
    signer : text;
    created_date : nat64;
};

type Backup = variant {
    Users;
    Wallets;
    Transactions;
    Policies
};

type Conf = record {
    controllers : opt vec principal;
    origins : opt vec text;
    ledger_canister_id : principal;
    is_test_env : opt bool;
};

type Network = variant {
    BTC;
    ETH;
    ICP
};

type Quorum = record {
    modified_date : nat64;
    quorum : nat64
};

type QuorumTransaction = record {
    id : nat64;
    transaction_type : TrType;
    initiator : text;
    modified_date : nat64;
    memo : opt text;
    state : TransactionState;
    approves : vec Approve;
    new_quorum : Quorum;
    quorum : Quorum;
    created_date : nat64;
};

type QuorumTransactionRequest = record {
    amount : nat64
};

type TrType = variant {
    Quorum
};

type TransactionRequestType = variant {
    WalletCreateTransaction : WalletCreateTransaction;
    TransferTransaction : TransferTransaction;
    QuorumStateTransaction : QuorumTransactionRequest;
};

type TransactionResponse = variant {
    QuorumTransaction : QuorumTransaction
};

type TransactionState = variant {
    Blocked;
    Undefined;
    Approved;
    Rejected;
    Executed;
    Canceled;
    Pending;
};

type TransferTransaction = record {
    to : text;
    block_index : opt nat64;
    wallet : text;
    amount : nat64;
};

type WalletCreateTransaction = record {
    name : text;
    network : Network
};service : (opt Conf) -> {
    config : (Conf) -> ();
    count : (Backup) -> (nat64) query;
    execute : () -> ();
    get_all_json : (nat32, nat32, Backup) -> (text) query;
    get_config : () -> (Conf) query;
    get_transactions_all : () -> (vec TransactionResponse) query;
    request_transaction : (TransactionRequestType) -> ();
    sync_controllers : () -> (vec text);
}