type Approve = record {
    status : TransactionState;
    signer : text;
    created_date : nat64;
};

type BasicTransactionFields = record {
    id : nat64;
    threshold : opt nat8;
    initiator : text;
    modified_date : nat64;
    memo : opt text;
    error : opt VaultError;
    state : TransactionState;
    approves : vec Approve;
    is_vault_state : bool;
    created_date : nat64;
    batch_uid : opt text;
};

type Conf = record {
    origins : vec text;
    repo_canister : text
};

type ControllersUpdateTransaction = record {
    principals : vec principal;
    common : BasicTransactionFields;
    current_controllers : vec principal;
};

type ControllersUpdateTransactionRequest = record {
    principals : vec principal;
};

type Currency = variant {
    ICP
};

type Member = record {
    modified_date : nat64;
    name : text;
    role : VaultRole;
    member_id : text;
    created_date : nat64;
};

type MemberCreateTransaction = record {
    name : text;
    role : VaultRole;
    member_id : text;
    common : BasicTransactionFields;
};

type MemberCreateTransactionRequest = record {
    name : text;
    role : VaultRole;
    member_id : text;
    batch_uid : opt text;
};

type MemberRemoveTransaction = record {
    member_id : text;
    common : BasicTransactionFields;
};

type MemberRemoveTransactionRequest = record {
    member_id : text;
    batch_uid : opt text;
};

type MemberUpdateNameTransaction = record {
    name : text;
    member_id : text;
    common : BasicTransactionFields;
};

type MemberUpdateNameTransactionRequest = record {
    name : text;
    member_id : text;
    batch_uid : opt text;
};

type MemberUpdateRoleTransaction = record {
    role : VaultRole;
    member_id : text;
    common : BasicTransactionFields;
};

type MemberUpdateRoleTransactionRequest = record {
    role : VaultRole;
    member_id : text;
    batch_uid : opt text;
};

type Network = variant {
    IC;
    BTC;
    ETH
};

type Policy = record {
    uid : text;
    member_threshold : nat8;
    modified_date : nat64;
    amount_threshold : nat64;
    wallets : vec text;
    currency : Currency;
    created_date : nat64;
};

type PolicyCreateTransaction = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
    wallets : vec text;
    currency : Currency;
    common : BasicTransactionFields;
};

type PolicyCreateTransactionRequest = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
    wallets : vec text;
    currency : Currency;
    batch_uid : opt text;
};

type PolicyRemoveTransaction = record {
    uid : text;
    common : BasicTransactionFields;
};

type PolicyRemoveTransactionRequest = record {
    uid : text;
    batch_uid : opt text;
};

type PolicyUpdateTransaction = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
    common : BasicTransactionFields;
};

type PolicyUpdateTransactionRequest = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
    batch_uid : opt text;
};

type PurgeTransaction = record {
    common : BasicTransactionFields
};

type Quorum = record {
    modified_date : nat64;
    quorum : nat8
};

type QuorumUpdateTransaction = record {
    common : BasicTransactionFields;
    quorum : nat8;
};

type QuorumUpdateTransactionRequest = record {
    quorum : nat8;
    batch_uid : opt text;
};

type TopUpTransaction = record {
    block_index : opt nat64;
    currency : Currency;
    wallet : text;
    common : BasicTransactionFields;
    amount : nat64;
    policy : opt text;
};

type TopUpTransactionRequest = record {
    currency : Currency;
    wallet : text;
    amount : nat64;
};

type TransactionApproveRequest = record {
    transaction_id : nat64;
    state : TransactionState;
};

type TransactionCandid = variant {
    ControllersUpdateTransactionV : ControllersUpdateTransaction;
    WalletCreateTransactionV : WalletCreateTransaction;
    PolicyCreateTransactionV : PolicyCreateTransaction;
    MemberUpdateRoleTransactionV : MemberUpdateRoleTransaction;
    TopUpTransactionV : TopUpTransaction;
    VaultNamingUpdateTransactionV : VaultNamingUpdateTransaction;
    TransferTransactionV : TransferTransaction;
    TransferQuorumTransactionV : TransferQuorumTransaction;
    PolicyRemoveTransactionV : PolicyRemoveTransaction;
    PolicyUpdateTransactionV : PolicyUpdateTransaction;
    MemberCreateTransactionV : MemberCreateTransaction;
    MemberUpdateNameTransactionV : MemberUpdateNameTransaction;
    UpgradeTransactionV : VersionUpgradeTransaction;
    PurgeTransactionV : PurgeTransaction;
    QuorumUpdateTransactionV : QuorumUpdateTransaction;
    WalletUpdateNameTransactionV : WalletUpdateNameTransaction;
    MemberRemoveTransactionV : MemberRemoveTransaction;
};

type TransactionRequest = variant {
    QuorumUpdateTransactionRequestV : QuorumUpdateTransactionRequest;
    VaultNamingUpdateTransactionRequestV : VaultNamingUpdateTransactionRequest;
    PurgeTransactionRequestV : record {};
    ControllersUpdateTransactionRequestV : ControllersUpdateTransactionRequest;
    MemberUpdateNameTransactionRequestV : MemberUpdateNameTransactionRequest;
    TopUpTransactionRequestV : TopUpTransactionRequest;
    WalletCreateTransactionRequestV : WalletCreateTransactionRequest;
    MemberRemoveTransactionRequestV : MemberRemoveTransactionRequest;
    MemberCreateTransactionRequestV : MemberCreateTransactionRequest;
    TransferTransactionRequestV : TransferTransactionRequest;
    TransferQuorumTransactionRequestV : TransferQuorumTransactionRequest;
    MemberUpdateRoleTransactionRequestV : MemberUpdateRoleTransactionRequest;
    WalletUpdateNameTransactionRequestV : WalletUpdateNameTransactionRequest;
    PolicyUpdateTransactionRequestV : PolicyUpdateTransactionRequest;
    VersionUpgradeTransactionRequestV : VersionUpgradeTransactionRequest;
    PolicyRemoveTransactionRequestV : PolicyRemoveTransactionRequest;
    PolicyCreateTransactionRequestV : PolicyCreateTransactionRequest;
};

type TransactionState = variant {
    Blocked;
    Approved;
    Rejected;
    Executed;
    Purged;
    Pending;
};

type TransferTransaction = record {
    block_index : opt nat64;
    currency : Currency;
    address : text;
    wallet : text;
    common : BasicTransactionFields;
    amount : nat64;
    policy : opt text;
};

type TransferQuorumTransaction = record {
    block_index : opt nat64;
    currency : Currency;
    address : text;
    wallet : text;
    common : BasicTransactionFields;
    amount : nat64;
};

type TransferQuorumTransactionRequest = record {
    memo : opt text;
    currency : Currency;
    address : text;
    wallet : text;
    amount : nat64;
};

type TransferTransactionRequest = record {
    memo : opt text;
    currency : Currency;
    address : text;
    wallet : text;
    amount : nat64;
};

type VaultError = variant {
    QuorumNotReachable;
    WalletNotExists;
    CouldNotDefinePolicy;
    ThresholdAlreadyExists;
    CanisterReject : record {
        message : text
    };
    MemberNotExists;
    MemberAlreadyExists;
    ThresholdDefineError : record {
        message : text
    };
    ControllersUpdateError : record {
        message : text
    };
    UIDAlreadyExists;
    PolicyNotExists;
};

type VaultNamingUpdateTransaction = record {
    name : opt text;
    description : opt text;
    common : BasicTransactionFields;
};

type VaultNamingUpdateTransactionRequest = record {
    name : opt text;
    description : opt text;
    batch_uid : opt text;
};

type VaultRole = variant {
    Member;
    Admin
};

type VaultState = record {
    members : vec Member;
    name : opt text;
    description : opt text;
    wallets : vec Wallet;
    quorum : Quorum;
    policies : vec Policy;
};

type VersionUpgradeTransaction = record {
    version : text;
    initial_version : text;
    common : BasicTransactionFields;
};

type VersionUpgradeTransactionRequest = record {
    version : text
};

type Wallet = record {
    uid : text;
    modified_date : nat64;
    name : text;
    network : Network;
    created_date : nat64;
};

type WalletCreateTransaction = record {
    uid : text;
    name : text;
    network : Network;
    common : BasicTransactionFields;
};

type WalletCreateTransactionRequest = record {
    uid : text;
    name : text;
    network : Network;
    batch_uid : opt text;
};

type WalletUpdateNameTransaction = record {
    uid : text;
    name : text;
    common : BasicTransactionFields;
};

type WalletUpdateNameTransactionRequest = record {
    uid : text;
    name : text;
    batch_uid : opt text;
};service : (principal, Conf) -> {
    approve : (vec TransactionApproveRequest) -> (vec TransactionCandid);
    canister_balance : () -> (nat64) query;
    execute : () -> ();
    get_state : (opt nat64) -> (VaultState) query;
    get_transactions_all : () -> (vec TransactionCandid) query;
    get_version : () -> (text) query;
    request_transaction : (vec TransactionRequest) -> (vec TransactionCandid);
    get_controllers : () -> (vec principal);
    get_trusted_origins_certified: () -> (record {
        response: vec text;
        certificate: vec nat8;
        witness: vec nat8;
    }) query;
}