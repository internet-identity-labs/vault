type Approve = record {
    status : TransactionState;
    signer : text;
    created_date : nat64;
};

type BasicTransactionFields = record {
    id : nat64;
    transaction_type : TrType;
    threshold : opt nat8;
    initiator : text;
    modified_date : nat64;
    memo : opt text;
    state : TransactionState;
    approves : vec Approve;
    is_vault_state : bool;
    created_date : nat64;
    batch_uid : opt text;
};

type Conf = record {
    origins : opt vec text;
    ledger_canister_id : principal
};

type Currency = variant {
    ICP
};

type Member = record {
    modified_date : nat64;
    name : text;
    role : VaultRole;
    state : ObjectState;
    member_id : text;
    created_date : nat64;
};

type MemberCreateTransaction = record {
    name : text;
    role : VaultRole;
    member_id : text;
    common : BasicTransactionFields;
};

type MemberCreateTransactionRequest = record {
    name : text;
    role : VaultRole;
    member_id : text;
};

type MemberRemoveTransaction = record {
    member_id : text;
    common : BasicTransactionFields;
};

type MemberRemoveTransactionRequest = record {
    member_id : text
};

type MemberUpdateNameTransaction = record {
    name : text;
    member_id : text;
    common : BasicTransactionFields;
};

type MemberUpdateNameTransactionRequest = record {
    name : text;
    member_id : text;
};

type MemberUpdateRoleTransaction = record {
    role : VaultRole;
    member_id : text;
    common : BasicTransactionFields;
};

type MemberUpdateRoleTransactionRequest = record {
    role : VaultRole;
    member_id : text;
};

type Network = variant {
    IC;
    BTC;
    ETH
};

type ObjectState = variant {
    Active;
    Archived
};

type Policy = record {
    uid : text;
    member_threshold : nat8;
    modified_date : nat64;
    amount_threshold : nat64;
    wallets : vec text;
    currency : Currency;
    created_date : nat64;
};

type PolicyCreateTransaction = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
    wallets : vec text;
    currency : Currency;
    common : BasicTransactionFields;
};

type PolicyCreateTransactionRequest = record {
    member_threshold : nat8;
    amount_threshold : nat64;
    wallets : vec text;
    currency : Currency;
};

type PolicyRemoveTransaction = record {
    uid : text;
    common : BasicTransactionFields;
};

type PolicyRemoveTransactionRequest = record {
    uid : text
};

type PolicyUpdateTransaction = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
    common : BasicTransactionFields;
};

type PolicyUpdateTransactionRequest = record {
    uid : text;
    member_threshold : nat8;
    amount_threshold : nat64;
};

type Quorum = record {
    modified_date : nat64;
    quorum : nat8
};

type QuorumUpdateTransaction = record {
    transaction_type : TrType;
    common : BasicTransactionFields;
    quorum : nat8;
};

type QuorumUpdateTransactionRequest = record {
    quorum : nat8
};

type TrType = variant {
    WalletUpdateName;
    MemberCreate;
    PolicyRemove;
    WalletCreate;
    PolicyCreate;
    MemberRemove;
    PolicyUpdate;
    MemberUpdateName;
    MemberUpdateRole;
    QuorumUpdate;
    Transfer;
};

type TransactionApproveRequest = record {
    transaction_id : nat64;
    state : TransactionState;
};

type TransactionCandid = variant {
    WalletCreateTransactionV : WalletCreateTransaction;
    PolicyCreateTransactionV : PolicyCreateTransaction;
    MemberUpdateRoleTransactionV : MemberUpdateRoleTransaction;
    PolicyRemoveTransactionV : PolicyRemoveTransaction;
    PolicyUpdateTransactionV : PolicyUpdateTransaction;
    MemberCreateTransactionV : MemberCreateTransaction;
    MemberUpdateNameTransactionV : MemberUpdateNameTransaction;
    QuorumUpdateTransactionV : QuorumUpdateTransaction;
    WalletUpdateNameTransactionV : WalletUpdateNameTransaction;
    MemberRemoveTransactionV : MemberRemoveTransaction;
};

type TransactionRequest = variant {
    QuorumUpdateTransactionRequestV : QuorumUpdateTransactionRequest;
    MemberUpdateNameTransactionRequestV : MemberUpdateNameTransactionRequest;
    WalletCreateTransactionRequestV : WalletCreateTransactionRequest;
    MemberRemoveTransactionRequestV : MemberRemoveTransactionRequest;
    MemberCreateTransactionRequestV : MemberCreateTransactionRequest;
    MemberUpdateRoleTransactionRequestV : MemberUpdateRoleTransactionRequest;
    WalletUpdateNameTransactionRequestV : WalletUpdateNameTransactionRequest;
    PolicyUpdateTransactionRequestV : PolicyUpdateTransactionRequest;
    PolicyRemoveTransactionRequestV : PolicyRemoveTransactionRequest;
    PolicyCreateTransactionRequestV : PolicyCreateTransactionRequest;
};

type TransactionState = variant {
    Blocked;
    Approved;
    Rejected;
    Executed;
    Canceled;
    Pending;
};

type VaultRole = variant {
    Member;
    Admin
};

type VaultState = record {
    members : vec Member;
    wallets : vec Wallet;
    quorum : Quorum;
    policies : vec Policy;
};

type Wallet = record {
    uid : text;
    modified_date : nat64;
    name : text;
    network : Network;
    state : ObjectState;
    created_date : nat64;
};

type WalletCreateTransaction = record {
    uid : text;
    name : text;
    network : Network;
    common : BasicTransactionFields;
};

type WalletCreateTransactionRequest = record {
    name : text;
    network : Network
};

type WalletUpdateNameTransaction = record {
    uid : text;
    name : text;
    common : BasicTransactionFields;
};

type WalletUpdateNameTransactionRequest = record {
    uid : text;
    name : text
};service : (opt Conf) -> {
    approve : (vec TransactionApproveRequest) -> (vec TransactionCandid);
    execute : () -> ();
    get_state : (opt nat64) -> (VaultState) query;
    get_transactions_all : () -> (vec TransactionCandid) query;
    request_transaction : (vec TransactionRequest) -> (vec TransactionCandid);
}