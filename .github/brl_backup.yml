name: BRL - Backup Canister
on: 
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        type: choice
        options: 
          - dev
          - ic
      canister_name:
        description: 'Choose applicable canister'
        required: true
        type: choice
        options:
          - vault
      compress_backup:
        description: 'Compress backup'
        type: choice
        options: 
          - 'true'
          - 'false'
      debug_messages:
        description: 'Show debug messages'
        type: choice
        options: 
          - 'false'
          - 'true'
      confirmation:
        description: 'For the ic backup - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name }}
  CANISTER_NAME: ${{ github.event.inputs.canister_name }}
  COMPRESS_BACKUP: ${{ github.event.inputs.compress_backup }}
  CI_DEBUG: ${{ github.event.inputs.debug_messages }}


jobs:
  Backup:
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks.
        if: ${{ (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes') }}
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: Checkout repo.
        uses: actions/checkout@v3

      - name: Checkout CI repo.
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: PRE-BACKUP => Populate env vars.
        run: |
          source ./ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2

          if [ "${NETWORK_NAME}" == 'dev' ]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          elif [ "${NETWORK_NAME}" == 'ic' ]; then
            ID_NAME="prod_vault"
            IDENTITY_PEM_NAME_VAR="PROD_VAULT_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          ci_echo_debug "Populating env variables" >&2
          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV

      - name: PRE-BACKUP => Print Vars.
        run: |
          source ./ci_libs/CI_LIBS.sh
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2
          ci_echo_info "COMPRESS_BACKUP=${COMPRESS_BACKUP}" >&2

      - name: PRE-BACKUP => Write identity.
        run: |
          source ./ci_libs/CI_LIBS.sh

          mkdir -p "${ID_PATH}"
          echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"

            ci_echo_warn "Preparing encoded key..." >&2
            ci_echo_info "Installing base64 package..." >&2
            sudo apt-get update && sudo apt-get install -y coreutils moreutils

            ci_echo_info "Decoding..." >&2
            base64 -d "${ID_PATH}/identity.pem" | sponge "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}
          PROD_VAULT_KEY: ${{secrets.PROD_VAULT_KEY}}

      - name: PRE-BACKUP => DFX status.
        run: |
          dfx --version

      - name: BACKUP => Backup.
        run: |
          source ./ci_libs/CI_LIBS.sh
          source ./ci_libs/canister_backup_restore.sh

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            CI_DEBUG=true
          fi

          dfx identity use "${ID_NAME}"

          ci_echo_debug "ci_canister_backup '${CANISTER_NAME}' '${NETWORK_NAME}' '${BACKUP_FOLDER}' '${BACKUP_CHUNK_SIZE}' '${COMPRESS_BACKUP}'" >&2
          ci_canister_backup "${CANISTER_NAME}" "${NETWORK_NAME}" "${BACKUP_FOLDER}" "${BACKUP_CHUNK_SIZE}" "${COMPRESS_BACKUP}"
        env:
          BACKUP_FOLDER: /home/ubuntu/backup/
          BACKUP_CHUNK_SIZE: 1500
