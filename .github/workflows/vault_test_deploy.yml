# Redeploy vault to the canister which used by vault-frontend for tests
name: Deploy Vault Test
on: 
  workflow_dispatch:

env:
  CANISTER_NAME: vault
  CI_DEBUG: true


jobs:
  Deploy:
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs
          clean: false

      - name: Cache Cargo dependencies.
        uses: actions/cache@v4
        with:
          path: |
            /home/ubuntu/.cargo/registry/
            /home/ubuntu/.cargo/cargo_target/
            src/vault/target/
            target/
          key: cargo-vault
 
      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: PRE-BUILD => Populate env vars.
        env:
          NETWORK_NAME: test
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2

          ID_NAME="dev_admin"
          IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"

          ID_PATH="${HOME}/.config/dfx/identity/${ID_NAME}"

          # For PRO tests
          INSTALL_ARGUMENTS_PRO=$(cat <<EOF
          (principal "7f3jf-ns7yl-tjcdk-fijk6-avi55-g5uyp-orxk6-4pv6p-f6d2c-7nex5-nae", record { origins = vec {"http://localhost:4200"; "https://vaults-dev.nfid.one"; "https://hoj3i-aiaaa-aaaak-qcl7a-cai.icp0.io"; }; repo_canister = "7jlkn-paaaa-aaaap-abvpa-cai" })
          EOF
          )

          # For STANDARD tests
          INSTALL_ARGUMENTS_STANDARD=$(cat <<EOF
          (principal "dtqie-ljbod-hxjr3-eqaud-lghwh-wngyj-iwai7-6dpth-jrkca-2j224-7ae", record { origins = vec {"http://localhost:4200"; "https://vaults-dev.nfid.one"; "https://hoj3i-aiaaa-aaaak-qcl7a-cai.icp0.io"; }; repo_canister = "7jlkn-paaaa-aaaap-abvpa-cai" })
          EOF
          )

          ci_echo_debug "Populating env variables" >&2
          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV
          
          echo "INSTALL_ARGUMENTS_PRO=${INSTALL_ARGUMENTS_PRO}" >> $GITHUB_ENV
          echo "INSTALL_ARGUMENTS_STANDARD=${INSTALL_ARGUMENTS_STANDARD}" >> $GITHUB_ENV

      - name: PRE-BUILD => Print Vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

          ci_echo_info "INSTALL_ARGUMENTS_PRO=${INSTALL_ARGUMENTS_PRO}" >&2
          ci_echo_info "INSTALL_ARGUMENTS_STANDARD=${INSTALL_ARGUMENTS_STANDARD}" >&2

      - name: PRE-BUILD => Write identity.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          mkdir -p "${ID_PATH}"

          ci_echo_warn "Preparing encoded key..." >&2
          ci_echo_info "Decoding..." >&2
          echo "${!IDENTITY_PEM_NAME_VAR}" | base64 -d > "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{ secrets.DEV_ADMIN_KEY }}

      - name: BUILD => Build the test canister (PRO).
        env:
          NETWORK_NAME: test
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          rm -rf .dfx;
          ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: INSTALL => Install the test canister (PRO).
        env:
          NETWORK_NAME: test
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          ci_echo_debug "dfx canister install --yes ${INSTALL_ARGUMENTS_PRO:+--argument '${INSTALL_ARGUMENTS_PRO}'} --network "${NETWORK_NAME}" --mode reinstall ${CANISTER_NAME}" >&2
          if ! result=$( dfx canister install --yes ${INSTALL_ARGUMENTS_PRO:+--argument "${INSTALL_ARGUMENTS_PRO}"} --network "${NETWORK_NAME}" --mode reinstall ${CANISTER_NAME} ); then
            ci_echo_error "Install failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2
          ci_echo_success "Canister '${CANISTER_NAME}' was installed to '${NETWORK_NAME}'" >&2

      - name: BUILD => Build the test2 canister (STANDARD).
        env:
          NETWORK_NAME: test2
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          rm -rf .dfx;
          ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: INSTALL => Install the test2 canister (STANDARD).
        env:
          NETWORK_NAME: test2
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          ci_echo_debug "dfx canister install --yes ${INSTALL_ARGUMENTS_STANDARD:+--argument '${INSTALL_ARGUMENTS_STANDARD}'} --network "${NETWORK_NAME}" --mode reinstall ${CANISTER_NAME}" >&2
          if ! result=$( dfx canister install --yes ${INSTALL_ARGUMENTS_STANDARD:+--argument "${INSTALL_ARGUMENTS_STANDARD}"} --network "${NETWORK_NAME}" --mode reinstall ${CANISTER_NAME} ); then
            ci_echo_error "Install failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2
          ci_echo_success "Canister '${CANISTER_NAME}' was installed to '${NETWORK_NAME}'" >&2