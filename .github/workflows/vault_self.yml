name: SH - Vault
on: 
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        type: choice
        options: 
          - dev
          - stage
          - ic
      canister_name:
        description: 'Choose applicable canister'
        required: true
        type: choice
        options:
          - vault_manager
          - vault_repo
          - vault
      artifact_version:
        description: 'The version of your VAULT artifact in SemVer format'
        type: string
      artifact_description:
        description: 'The description of your VAULT artifact'
        type: string
      uniq_artifact_version:
        description: 'Add to the provided version uniq string'
        type: choice
        options: 
          - 'true'
          - 'false'
      confirmation:
        description: 'For the ic deployment - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name }}
  CANISTER_NAME: ${{ github.event.inputs.canister_name }}
  CI_DEBUG: true
  ARTIFACT_VERSION: ${{ github.event.inputs.artifact_version }}
  ARTIFACT_DESCRIPTION: ${{ github.event.inputs.artifact_description }}
  UNIQ_ARTIFACT_VERSION: ${{ github.event.inputs.uniq_artifact_version }}


jobs:
  Deploy:
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks.
        if: ${{ (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes') }}
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Cache Cargo dependencies.
        uses: actions/cache@v4
        with:
          path: |
            /home/ubuntu/.cargo/registry/
            /home/ubuntu/.cargo/cargo_target/
            src/vault/target/
            target/
          key: ${{ runner.os }}-cargo-vault
 
      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: PRE-BUILD => Populate env vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2

          if [[ "${NETWORK_NAME}" =~ ^(dev|stage)$ ]]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          elif [ "${NETWORK_NAME}" == 'ic' ]; then
            ID_NAME="prod_vault"
            IDENTITY_PEM_NAME_VAR="PROD_VAULT_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          if [ "${CANISTER_NAME}" == 'vault' ]; then
            # https://semver.org/
            REGEX='^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?(\+([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$'
            if ! [[ "${ARTIFACT_VERSION}" =~ ${REGEX} ]]; then
              ci_echo_error "ARTIFACT_VERSION : '${ARTIFACT_VERSION}' - is not SemVer correct (https://semver.org/)" >&2
              exit 1
            fi

            if [ "${UNIQ_ARTIFACT_VERSION}" == 'true' ]; then
              ci_echo_warn "UNIQ_ARTIFACT_VERSION var was provided." >&2
              UNIQ_VERSION_PART="$( date +%s-%Y%m%d%H%M%S )"
              UNIQ_VERSION_PART="-${UNIQ_VERSION_PART}"
            fi

            ARTIFACT_VERSION="-${ARTIFACT_VERSION}${UNIQ_VERSION_PART}"
            VERSION_FILE_PATH='src/vault/src/version_const.rs'
            VERSION_FILE_CONTENT="pub const VERSION: &str = \"${ARTIFACT_VERSION#-}\";"
          else
            ARTIFACT_VERSION=''
          fi

          # INSTALL ARGUMENT SECTION
          case ${NETWORK_NAME} in
            dev)

              case ${CANISTER_NAME} in
                vault_manager)
                  INSTALL_ARGUMENTS=$(cat <<EOF
          (record { origins = vec {"http://localhost:4200"; "https://vaults-dev.nfid.one"; "https://hoj3i-aiaaa-aaaak-qcl7a-cai.icp0.io";}; initial_cycles_balance = 500_000_000_000 : nat; icp_price = 100_000_000 : nat64; repo_canister_id = "7jlkn-paaaa-aaaap-abvpa-cai"; destination_address = "4918c656ea851d74504c84fe61581ef7cc00b282d44aa61b4c2c079ed189314e" } )
          EOF
          )
                ;;

                vault_repo)
                  INSTALL_ARGUMENTS=$(cat <<EOF
          (record { controllers = vec {}; origins = vec {}; })
          EOF
          )
                ;;
              esac

              ;;
            
            stage)

              case ${CANISTER_NAME} in
                vault_manager)
                  INSTALL_ARGUMENTS=$(cat <<EOF
          (record { origins = vec {"http://localhost:4200"; "https://xu3mz-biaaa-aaaap-qb6ha-cai.icp0.io";}; initial_cycles_balance = 250_000_000_000 : nat; icp_price = 100_000_000 : nat64; repo_canister_id = "u3pfr-dqaaa-aaaag-aciqa-cai"; destination_address = "4918c656ea851d74504c84fe61581ef7cc00b282d44aa61b4c2c079ed189314e" } )
          EOF
          )
                ;;

                vault_repo)
                  INSTALL_ARGUMENTS=$(cat <<EOF
          (record { controllers = vec {}; origins = vec {}; })
          EOF
          )
                ;;
              esac

              ;;
          esac

          ci_echo_debug "Populating env variables" >&2
          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV
          echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> $GITHUB_ENV

          if [ "${CANISTER_NAME}" == 'vault' ]; then
            echo "ARTIFACT_DESCRIPTION=${ARTIFACT_DESCRIPTION}" >> $GITHUB_ENV
            echo "UNIQ_VERSION_PART=${UNIQ_VERSION_PART}" >> $GITHUB_ENV
            echo "VERSION_FILE_PATH=${VERSION_FILE_PATH}" >> $GITHUB_ENV
            echo "VERSION_FILE_CONTENT=${VERSION_FILE_CONTENT}" >> $GITHUB_ENV
          fi

          echo "INSTALL_ARGUMENTS=${INSTALL_ARGUMENTS}" >> $GITHUB_ENV


      - name: PRE-BUILD => Print Vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2
          ci_echo_info "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >&2

          if [ "${CANISTER_NAME}" == 'vault' ]; then
            ci_echo_info "ARTIFACT_DESCRIPTION=${ARTIFACT_DESCRIPTION}" >&2
            ci_echo_info "UNIQ_VERSION_PART=${UNIQ_VERSION_PART}" >&2
            ci_echo_info "VERSION_FILE_PATH=${VERSION_FILE_PATH}" >&2
            ci_echo_info "VERSION_FILE_CONTENT=${VERSION_FILE_CONTENT}" >&2
          fi

          ci_echo_info "INSTALL_ARGUMENTS=${INSTALL_ARGUMENTS}" >&2

      - name: PRE-BUILD => Write identity.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          mkdir -p "${ID_PATH}"

          ci_echo_warn "Preparing encoded key..." >&2
          ci_echo_info "Decoding..." >&2
          echo "${!IDENTITY_PEM_NAME_VAR}" | base64 -d > "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}
          PROD_VAULT_KEY: ${{secrets.PROD_VAULT_KEY}}

      - name: PRE-BUILD => Write version file.
        if: ${{ github.event.inputs.canister_name == 'vault' }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_warn "File '${VERSION_FILE_PATH}' will be overwrited." >&2
          echo "${VERSION_FILE_CONTENT}" > "${VERSION_FILE_PATH}"
          ci_echo_info "Done" >&2

          ci_echo_title "New File content" >&2
          cat "${VERSION_FILE_PATH}"

      - name: BUILD => Build the canister.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          rm -rf .dfx;
          ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: INSTALL => Install the canister.
        if: ${{ (github.event.inputs.canister_name != 'vault') }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            CI_DEBUG="true"
          fi

          dfx identity use "${ID_NAME}"

          ci_echo_debug "echo 'yes' | dfx canister install ${INSTALL_ARGUMENTS:+--argument '${INSTALL_ARGUMENTS}'} --network "${NETWORK_NAME}" --mode upgrade ${CANISTER_NAME}" >&2
          if ! result=$( echo 'yes' | dfx canister install ${INSTALL_ARGUMENTS:+--argument "${INSTALL_ARGUMENTS}"} --network "${NETWORK_NAME}" --mode upgrade ${CANISTER_NAME} ); then
            ci_echo_error "Install failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2
          ci_echo_success "Canister '${CANISTER_NAME}' was installed" >&2

      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CANISTER_WASM }}${{ env.ARTIFACT_VERSION }}
          path: ${{ github.workspace }}/${{ env.CANISTER_WASM }}

      - name: DEPLOY => Upload WASM to the Vault Repo.
        if: ${{ (github.event.inputs.canister_name == 'vault') && (github.event.inputs.network_name != 'ic')}}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "cat canister_ids.json | jq -er '.vault_repo.${NETWORK_NAME}'" >&2
          if ! vault_canister_id=$(cat canister_ids.json | jq -er ".vault_repo.${NETWORK_NAME}"); then
            ci_echo_error "Can't get canister 'vault_repo' and network '${NETWORK_NAME}' data from canister_ids.json" >&2
            exit 1
          fi

          ci_echo_info "Saving WASM to the vault_repo canister." >&2
          export WASM_FILE_PATH="${{ github.workspace }}/${{ env.CANISTER_WASM }}"
          export VERSION="${ARTIFACT_VERSION#-}"
          export DESCRIPTION="${ARTIFACT_DESCRIPTION}"
          export CANISTER_ID="${vault_canister_id}"

          # TODO: Change this for production to the secrets.
          export IDENTITY_SEED="87654321876543218765432187654321"

          ci_echo_info "WASM_FILE_PATH=${WASM_FILE_PATH}" >&2
          ci_echo_info "VERSION=${VERSION}" >&2
          ci_echo_info "DESCRIPTION=${DESCRIPTION}" >&2
          ci_echo_info "CANISTER_ID=${CANISTER_ID}" >&2

          ci_echo_debug "npm install typescript" >&2
          npm install typescript

          ci_echo_debug "npm install" >&2
          npm install

          ci_echo_debug "npx tsc .github/workflows/save_vault_wasm.ts --skipLibCheck" >&2
          npx tsc .github/workflows/save_vault_wasm.ts --skipLibCheck
          
          ci_echo_debug "npm run vault-upload" >&2
          npm run vault-upload